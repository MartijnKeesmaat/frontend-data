{"version":3,"sources":["renderBarChart.js","renderDonutChart.js","index.js"],"names":["renderBarChart","categories","width","height","padding","svg","addGlobalSVGBarChart","xScale","addXScaleBarChart","addBarsToBarChart","addLabelsToBarChart","addXAxisToBarChart","addGridlinesToBarChart","d3","select","append","attr","scaleLinear","domain","max","d","value","range","selectAll","data","enter","i","text","name","call","wrap","xAxis","axisBottom","ticks","g","remove","x","scaleTime","makeXGridlines","tickSize","tickFormat","each","word","words","split","reverse","line","lineNumber","y","dy","parseFloat","tspan","pop","push","join","node","getComputedTextLength","addGlobalSvg","renderDonutChart","radius","Math","min","color","scaleOrdinal","arc","innerRadius","outerRadius","pie","sort","materials","on","style","_current","categoryCounter","nCategories","queryMainCategories","fetchDataFromQuery","querySrc","query","outsideScope","responseFn","fetch","encodeURIComponent","then","res","json","handleDataMaterialPerCategory","getCategoriesFromData","fetchMaterialPerCategoryEach","results","bindings","map","termmaster","category","categoryLabel","objCount","categoriesTermaster","forEach","queryCategories","handleFetchMaterialPerCategory","normalizeMaterialPerCategory","renderCharts","Number","materiaalLabel","choCount","colors","grey","purple","dataForFP","slice"],"mappings":"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","file":"src.bfc34368.js","sourceRoot":"../src","sourcesContent":["export default function renderBarChart(categories, width, height) {\n  const padding = 50;\n  const svg = addGlobalSVGBarChart(width, height);\n  const xScale = addXScaleBarChart(width, padding, categories);\n  addBarsToBarChart(xScale, svg, categories);\n  addLabelsToBarChart(svg, categories);\n  addXAxisToBarChart(svg, height, padding, xScale);\n  addGridlinesToBarChart(svg, width, height)\n}\n\nconst addGlobalSVGBarChart = (width, height) => {\n  return d3\n    .select(\".bar-chart\")\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n}\n\nconst addXScaleBarChart = (width, padding, categories) => {\n  return d3\n    .scaleLinear()\n    .domain([0, d3.max(categories, d => d.value)])\n    .range([padding, width - padding]);\n}\n\nconst addBarsToBarChart = (xScale, svg, categories) => {\n  svg\n    .selectAll(\"rect\")\n    .data(categories)\n    .enter()\n    .append(\"rect\")\n    .attr(\"x\", (d, i) => 100)\n    .attr(\"y\", (d, i) => i * 50)\n    .attr(\"width\", d => xScale(d.value) - 50)\n    .attr(\"height\", 15)\n    .attr(\"class\", \"bar\")\n    .attr(\"rx\", 15 / 2) //height / 2\n}\n\nconst addLabelsToBarChart = (svg, categories) => {\n  svg\n    .selectAll(\"text\")\n    .data(categories)\n    .enter()\n    .append(\"text\")\n    .text(d => d.name)\n    .attr(\"x\", (d, i) => 0)\n    .attr(\"y\", (d, i) => (i * 50) + 10)\n    .attr(\"class\", \"label\")\n    .attr(\"dy\", 0)//set the dy here\n    .attr(\"text-anchor\", \"end\")\n    .attr(\"transform\", \"translate(90,\" + 0 + \")\")\n    .call(wrap, 100);\n}\n\nconst addXAxisToBarChart = (svg, height, padding, xScale, categories) => {\n  const xAxis = d3.axisBottom(xScale).ticks(3);\n  svg.append(\"g\")\n    .attr(\"transform\", \"translate(55,\" + (height - padding) + \")\")\n    .attr(\"color\", '#9AA1A9')\n    .call(xAxis)\n    .call(g => g.select(\".domain\").remove())\n}\n\nconst addGridlinesToBarChart = (svg, width, height) => {\n  const x = d3.scaleTime().range([0, width]);\n\n  svg.append(\"g\")\n    .attr(\"class\", \"grid\")\n    .attr(\"transform\", \"translate(100,\" + height + \")\")\n    .call(makeXGridlines(x)\n      .tickSize(-height)\n      .tickFormat(\"\")\n    )\n}\n\n// https://bl.ocks.org/d3noob/c506ac45617cf9ed39337f99f8511218\nconst makeXGridlines = x => d3.axisBottom(x).ticks(5)\n\n// https://bl.ocks.org/guypursey/f47d8cd11a8ff24854305505dbbd8c07\nfunction wrap(text, width) {\n  text.each(function () {\n    let text = d3.select(this),\n      words = text.text().split(/\\s+/).reverse(),\n      word,\n      line = [],\n      lineNumber = 0,\n      lineHeight = 1.1, // ems\n      y = text.attr(\"y\"),\n      dy = parseFloat(text.attr(\"dy\")),\n      tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\")\n    while (word = words.pop()) {\n      line.push(word)\n      tspan.text(line.join(\" \"))\n      if (tspan.node().getComputedTextLength() > width) {\n        line.pop()\n        tspan.text(line.join(\" \"))\n        line = [word]\n        tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", `${++lineNumber * lineHeight + dy}em`).text(word)\n      }\n    }\n  })\n}","const addGlobalSvg = () => {\n  return d3.select(\".donut-chart\")\n    .append('svg')\n    .attr('class', 'pie')\n    .attr('width', width)\n    .attr('height', height);\n}\n\nexport default function renderDonutChart(categories) {\n  const text = \"\";\n\n  const width = 234;\n  const height = 234;\n  const thickness = 35;\n\n  const radius = Math.min(width, height) / 2;\n  const colorArr = ['#B83B5E', '#995A3A', '#F08A5D', '#F9D769', '#6A2C70'];\n  const color = d3.scaleOrdinal(colorArr);\n\n  addGlobalSvg()\n\n  const g = svg.append('g')\n    .attr('transform', 'translate(' + (width / 2) + ',' + (height / 2) + ')');\n\n  const arc = d3.arc()\n    .innerRadius(radius - thickness)\n    .outerRadius(radius);\n\n  const pie = d3.pie()\n    .value(function (d) { return d.value; })\n    .sort(null);\n\n  const path = g.selectAll('path')\n    .data(pie(categories[0].materials))\n    .enter()\n    .append(\"g\")\n    .on(\"mouseover\", function (d) {\n      let g = d3.select(this)\n        .style(\"cursor\", \"pointer\")\n        .style(\"fill\", \"black\")\n        .append(\"g\")\n        .attr(\"class\", \"text-group\");\n\n      g.append(\"text\")\n        .attr(\"class\", \"name-text\")\n        .text(`${d.data.name}`)\n        .attr('text-anchor', 'middle')\n        .attr('dy', '-1.2em');\n\n      g.append(\"text\")\n        .attr(\"class\", \"value-text\")\n        .text(`${d.data.value}`)\n        .attr('text-anchor', 'middle')\n        .attr('dy', '.6em');\n    })\n    .on(\"mouseout\", function (d) {\n      d3.select(this)\n        .style(\"cursor\", \"none\")\n        .style(\"fill\", color(this._current))\n        .select(\".text-group\").remove();\n    })\n    .append('path')\n    .attr('d', arc)\n    .attr('fill', (d, i) => color(i))\n    .on(\"mouseover\", function (d) {\n      d3.select(this)\n        .style(\"cursor\", \"pointer\")\n        .style(\"fill\", \"black\");\n    })\n    .on(\"mouseout\", function (d) {\n      d3.select(this)\n        .style(\"cursor\", \"none\")\n        .style(\"fill\", color(this._current));\n    })\n    .each(function (d, i) { this._current = i; });\n\n\n  g.append('text')\n    .attr('text-anchor', 'middle')\n    .attr('dy', '.35em')\n    .text(text);\n}\n\n\n","import renderBarChart from './renderBarChart.js'\nimport renderDonutChart from './renderDonutChart.js'\n\nlet categoryCounter = 0;\nconst nCategories = 19;\nconst categories = [];\n\nconst queryMainCategories = `\n  #+ summary: Get titles meestvoorkomende catogrieen\n  PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n  PREFIX dc: <http://purl.org/dc/elements/1.1/>\n  PREFIX dct: <http://purl.org/dc/terms/>\n  PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n  PREFIX edm: <http://www.europeana.eu/schemas/edm/>\n  PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n  # tel aantallen per materiaal\n  SELECT ?categoryLabel ?category (COUNT(?allChos) AS ?objCount) WHERE {\n    ?cho edm:isRelatedTo <https://hdl.handle.net/20.500.11840/termmaster2802> .\n    <https://hdl.handle.net/20.500.11840/termmaster2802> skos:narrower ?category .\n    ?category skos:prefLabel ?categoryLabel .\n    ?category skos:narrower* ?allChos .\n  }\n    \n  GROUP BY ?categoryLabel ?category\n  ORDER BY DESC(?objCount)\n`;\n\nconst fetchDataFromQuery = (querySrc, query, outsideScope, responseFn) => {\n  fetch(`${querySrc}?query=${encodeURIComponent(query)}&format=json`)\n    .then(res => res.json())\n    .then(data => responseFn(data, outsideScope));\n};\n\nconst handleDataMaterialPerCategory = data => {\n  const categories = getCategoriesFromData(data);\n  fetchMaterialPerCategoryEach(categories);\n};\n\nfetchDataFromQuery(\n  \"https://api.data.netwerkdigitaalerfgoed.nl/datasets/ivo/NMVW/services/NMVW-20/sparql\",\n  queryMainCategories,\n  \"\",\n  handleDataMaterialPerCategory\n);\n\nconst getCategoriesFromData = data => {\n  return data.results.bindings.map(i => {\n    return {\n      termmaster: `<${i.category.value}>`,\n      name: i.categoryLabel.value,\n      value: i.objCount.value\n    };\n  });\n};\n\nconst fetchMaterialPerCategoryEach = categoriesTermaster => {\n  categoriesTermaster.forEach(category => {\n    const queryCategories = `\n        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n        PREFIX dc: <http://purl.org/dc/elements/1.1/>\n        PREFIX dct: <http://purl.org/dc/terms/>\n        PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n        PREFIX edm: <http://www.europeana.eu/schemas/edm/>\n        PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n        # tel aantallen per materiaal\n        SELECT ?subcategorie ?materiaalLabel (COUNT(?cho) AS ?choCount) WHERE {\n        # haal van een term in de thesaurus de subcategorieen op\n        ${category.termmaster} skos:narrower* ?subcategorie .\n        # haal de objecten van deze subcategorieen en het materiaal\n        ?cho edm:isRelatedTo ?subcategorie .\n        ?cho dct:medium ?materiaal .\n        # haal het Label op van materiaal\n        ?materiaal skos:prefLabel ?materiaalLabel .\n        }\n        GROUP BY ?subcategorie ?materiaalLabel\n        ORDER BY DESC(?choCount)\n        LIMIT 5\n      `;\n\n    fetchDataFromQuery(\n      \"https://api.data.netwerkdigitaalerfgoed.nl/datasets/ivo/NMVW/services/NMVW-20/sparql\",\n      queryCategories,\n      category,\n      handleFetchMaterialPerCategory\n    );\n  });\n};\n\nconst handleFetchMaterialPerCategory = (data, category) => {\n  categoryCounter++;\n  categories.push(normalizeMaterialPerCategory(data, category));\n  if (categoryCounter >= nCategories) renderCharts(categories);\n};\n\nconst normalizeMaterialPerCategory = (data, category) => {\n  return {\n    name: category.name,\n    value: Number(category.value),\n    materials: data.results.bindings.map(i => {\n      return {\n        name: i.materiaalLabel.value,\n        value: Number(i.choCount.value)\n      };\n    })\n  };\n};\n\nconst colors = {\n  grey: \"#EDF0F4\",\n  purple: \"#6A2C70\"\n};\n\nfunction renderCharts(categories) {\n  const dataForFP = categories.slice(0, 5);\n  renderBarChart(dataForFP, 600, 300);\n  renderDonutChart(categories);\n}\n\n\n\n\n\n"]}